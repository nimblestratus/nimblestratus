# -*- mode: ruby -*-
# vi: set ft=ruby :

BOX_NAME = ENV['BOX_NAME'] || "ubuntu"
BOX_URI = ENV['BOX_URI'] || "http://files.vagrantup.com/precise64.box"
FORWARD_DOCKER_PORTS = ENV['FORWARD_DOCKER_PORTS']

CFG_OPTS = {
  :master => {
    :memory => 1024
  },
  :small => {
    :memory => 512
  },
  :medium => {
    :memory => 1024
  },
  :large => {
    :memory => 2048
  }
}

WORKERS = [:small,:small,:medium,:large]

Vagrant::Config.run do |config|
  worker_names = (1 .. WORKERS.size).to_a.map{|i| "%02d" %i}
  [:master, worker_names].flatten.each_with_index do |name,index|
    config.vm.define vm_name = "core-#{name}" do |config|
      # Setup virtual machine box. This VM configuration code is always executed.
      config.vm.box = BOX_NAME
      config.vm.box_url = BOX_URI
      config.vm.hostname = vm_name

      config.ssh.forward_agent = true
      
      config.vm.network :private_network, ip: "192.168.65.#{index + 1}"

      # Provision docker and new kernel if deployment was not done.
      # It is assumed Vagrant can successfully launch the provider instance.
      if Dir.glob("#{File.dirname(__FILE__)}/.vagrant/machines/#{vm_name}/*/id").empty?
        # Add lxc-docker package, etcd
        pkg_cmd = "wget -q -O - https://get.docker.io/gpg | apt-key add -;" \
        "echo deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list;" \
        "add-apt-repository ppa:mighost;" \
        "apt-get update -qq; apt-get install -q -y --force-yes lxc-docker etcd etcdctl collectd ruby-1.9.3; "
        # Add Ubuntu raring backported kernel
        pkg_cmd << "apt-get update -qq; apt-get install -q -y linux-image-generic-lts-raring; "

        # copy collectd.conf and syslog.conf
        pkg_cmd << "cp /vagrant/collectd.conf /etc/collectd/collectd.conf;"
        pkg_cmd << "cp /vagrant/rsyslog.conf /etc/rsyslog.conf;"

        # Install Pipework
        pkg_cmd << "mkdir -p /opt/docker/bin"
        pkg_cmd << "curl -s https://raw.github.com/jpetazzo/pipework/master/pipework > /opt/docker/bin/pipework; chmod u+x ./bin/pipework;"

        # Add guest additions if local vbox VM. As virtualbox is the default provider,
        # it is assumed it won't be explicitly stated.
        if ENV["VAGRANT_DEFAULT_PROVIDER"].nil? && ARGV.none? { |arg| arg.downcase.start_with?("--provider") }
          pkg_cmd << "apt-get install -q -y linux-headers-generic-lts-raring dkms; " \
          "echo 'Downloading VBox Guest Additions...'; " \
          "wget -q http://dlc.sun.com.edgesuite.net/virtualbox/4.2.12/VBoxGuestAdditions_4.2.12.iso; "


          # Prepare the VM to add guest additions after reboot
          pkg_cmd << "echo -e 'mount -o loop,ro /home/vagrant/VBoxGuestAdditions_4.2.12.iso /mnt\n" \
          "echo yes | /mnt/VBoxLinuxAdditions.run\numount /mnt\n" \
          "rm /root/guest_additions.sh; ' > /root/guest_additions.sh; " \
          "chmod 700 /root/guest_additions.sh; " \
          "sed -i -E 's#^exit 0#[ -x /root/guest_additions.sh ] \\&\\& /root/guest_additions.sh#' /etc/rc.local; " \
          "echo 'Installation of VBox Guest Additions is proceeding in the background.'; " \
          "echo '\"vagrant reload\" can be used in about 2 minutes to activate the new guest additions.'; "
        end
        # Activate new kernel
        pkg_cmd << "shutdown -r +1; "
        config.vm.provision :shell, :inline => pkg_cmd
      end
    end

    if !FORWARD_DOCKER_PORTS.nil?
      Vagrant::VERSION >= "1.1.0" and Vagrant.configure("2") do |config|
        (49000..49900).each do |port|
          config.vm.network :forwarded_port, :host => port+(index * 1000), :guest => port
        end
      end
    end
  end
end
